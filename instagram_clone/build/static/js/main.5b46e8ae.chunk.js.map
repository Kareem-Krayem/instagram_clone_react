{"version":3,"sources":["assets/1200px-Instagram_logo.svg.png","firebase.js","components/Post.js","components/ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","props","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","postId","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","username","src","imageUrl","caption","text","user","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","setCaption","image","setImage","progress","setProgress","LinearProgress","variant","Input","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","logo","require","classes","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","email","setEmail","password","setPassword","setUser","onAuthStateChanged","authUser","id","post","Modal","onClose","style","createUserWithEmailAndPassword","updateProfile","catch","alert","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b46e8ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1200px-Instagram_logo.svg.dcc389e5.png\";","import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyDaNVQ-aE94lJatdnBHmu4MpF6YPNHcvac\",\n    authDomain: \"kareem-instagram-clone.firebaseapp.com\",\n    databaseURL: \"https://kareem-instagram-clone.firebaseio.com\",\n    projectId: \"kareem-instagram-clone\",\n    storageBucket: \"kareem-instagram-clone.appspot.com\",\n    messagingSenderId: \"967033896911\",\n    appId: \"1:967033896911:web:d88b0e3e5a19f511601cba\",\n    measurementId: \"G-Q0YRN3H8C9\"\n};\nconst firebaseApp = firebase.initializeApp(config);\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport { db, auth, storage };","import React, { useState, useEffect } from 'react';\nimport './Post.css';\n\nimport {\n    Avatar,\n} from '@material-ui/core';\nimport { db } from '../firebase';\nimport firebase from 'firebase';\n\n\nfunction Post(props) {\n\n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState('');\n\n    useEffect(() => {\n        let unsubscribe;\n        if (props.postId) {\n            unsubscribe = db\n                .collection(\"posts\")\n                .doc(props.postId)\n                .collection(\"comments\")\n                .orderBy('timestamp', 'desc')\n                .onSnapshot((snapshot) => {\n                    setComments(snapshot.docs.map((doc) => doc.data()))\n                });\n        }\n        return () => {\n            unsubscribe();\n        };\n    }, [props.postId]);\n\n    const postComment = (event) => {\n        event.preventDefault();\n        db\n            .collection(\"posts\")\n            .doc(props.postId)\n            .collection(\"comments\")\n            .add({\n                text: comment,\n                username: props.user.displayName,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            });\n        setComment('');\n    };\n\n    return (\n        <div className=\"post\">\n            <div className=\"post__header\">\n                <Avatar\n                    className=\"post__avatar\"\n                    alt={props.username}\n                    src={props.username}\n                />\n                <h3>{props.username}</h3>\n            </div>\n            <img src={props.imageUrl}\n                alt=\"\" className=\"post__image\" />\n\n            <h4 className=\"post__text\">\n                <strong>{props.username} </strong>\n                {props.caption}\n            </h4>\n\n            {\n                <div className=\"post__comments\">\n                    {\n                        comments.map((comment) => (\n                            <p>\n                                <b>{comment.username} </b>\n                                {comment.text}\n                            </p>\n                        ))\n                    }\n                </div>\n            }\n            {\n                props.user && (\n                    <form className=\"post__commentBox\">\n                        <input\n                            className=\"post__input\"\n                            type=\"text\"\n                            placeholder=\"Add a comment..\"\n                            value={comment}\n                            onChange={(e) => setComment(e.target.value)}\n                        />\n                        <button\n                            disabled={!comment}\n                            className=\"post__button\"\n                            type=\"submit\"\n                            onClick={postComment}\n                        >Post</button>\n                    </form>\n                )\n            }\n        </div>\n    )\n}\n\nexport default Post;\n","import React, { useState } from 'react';\nimport './ImageUpload.css';\nimport {\n    Input,\n    Button,\n    LinearProgress,\n} from '@material-ui/core';\nimport { storage, db } from '../firebase';\nimport firebase from 'firebase';\n\nfunction ImageUpload({ username }) {\n\n    const [caption, setCaption] = useState('');\n    const [image, setImage] = useState(null);\n    const [progress, setProgress] = useState(0);\n\n    const handleChange = (e) => {\n        if (e.target.files[0]) {\n            setImage(e.target.files[0]);\n        }\n    };\n\n    const handleUpload = () => {\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n        uploadTask.on(\n            \"state_changed\",\n            (snapshot) => {\n                const progress = Math.round(\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n                setProgress(progress);\n            },\n            (error) => {\n                console.log(error.message);\n            },\n            () => {\n                storage\n                    .ref(\"images\")\n                    .child(image.name)\n                    .getDownloadURL()\n                    .then(url => {\n                        db.collection(\"posts\").add({\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            caption: caption,\n                            imageUrl: url,\n                            username: username\n                        });\n                        setProgress(0);\n                        setCaption(\"\");\n                        setImage(null);\n                    })\n            }\n        );\n    };\n\n    return (\n        <div className=\"imageUpload\">\n            <LinearProgress\n                value={progress}\n                variant=\"determinate\"\n            />\n            <Input\n                placeholder=\"Enter a caption...\"\n                type=\"text\"\n                value={caption}\n                onChange={(e) => setCaption(e.target.value)}\n            />\n            <Input placeholder=\"Enter your caption here...\"\n                type=\"file\"\n                onChange={handleChange}\n            />\n            <Button onClick={handleUpload}>\n                Upload\n            </Button>\n        </div>\n    )\n}\n\nexport default ImageUpload;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {\n  Modal,\n  makeStyles,\n  Button,\n  Input,\n} from '@material-ui/core';\nimport { db, auth } from './firebase';\nimport InstagramEmbed from 'react-instagram-embed';\n\nimport Post from './components/Post';\nimport ImageUpload from './components/ImageUpload';\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  }\n}))\n\nfunction App() {\n\n  const logo = require('./assets/1200px-Instagram_logo.svg.png');\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        console.log(authUser);\n        setUser(authUser);\n      } else {\n        setUser(null);\n      }\n    });\n    return () => {\n      unsubscribe();\n    }\n  }, [user, username]);\n\n  useEffect(() => {\n    db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        post: doc.data()\n      })))\n    })\n  }, []);\n\n  const signUp = (event) => {\n    event.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username,\n        });\n      })\n      .catch((error) => alert(error.message));\n    setOpen(false);\n  };\n\n  const signIn = (event) => {\n    event.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n    setOpenSignIn(false);\n  };\n\n\n  return (\n    <div className=\"app\">\n      <Modal\n        open={open}\n        onClose={() => setOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img className=\"app__headerImage\" src={logo} alt=\"logo\" />\n            </center>\n            <Input\n              placeholder=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)} />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)} />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)} />\n            <Button type=\"submit\" onClick={signUp}>Sign Up</Button>\n          </form>\n        </div>\n      </Modal>\n      <Modal\n        open={openSignIn}\n        onClose={() => setOpenSignIn(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img className=\"app__headerImage\" src={logo} alt=\"logo\" />\n            </center>\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)} />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)} />\n            <Button type=\"submit\" onClick={signIn}>Sign In</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <div className=\"app__header\">\n        <img className=\"app__headerImage\"\n          src={logo} alt=\"logo\" />\n        <div className=\"app__auth\">\n          {\n            user ?\n              (<Button onClick={() => auth.signOut()}>Logout</Button>)\n              : (<div className=\"app__loginContainer\">\n                <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n                <Button onClick={() => setOpen(true)}>Signup</Button>\n              </div>)\n          }\n        </div>\n      </div>\n\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          {\n            posts.map(({ id, post }) => (\n              <Post\n                key={id}\n                postId={id}\n                user={user}\n                username={post.username}\n                caption={post.caption}\n                imageUrl={post.imageUrl}\n              />\n            ))\n          }\n        </div>\n        <div className=\"app_postsRight\">\n          <InstagramEmbed\n            url='https://www.instagram.com/p/B3Ae4mcJQrM/?igshid=1x79euy5numgv'\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName='div'\n            protocol=''\n            injectScript\n            onLoading={() => { }}\n            onSuccess={() => { }}\n            onAfterRender={() => { }}\n            onFailure={() => { }}\n          />\n        </div>\n      </div>\n\n\n      {\n        user?.displayName ? (\n          <ImageUpload username={user.displayName} />\n        ) : (<h3 style={{ textAlign: 'center' }}>Sorry you need to login<br />To add a post !!!</h3>)\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}